{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","Collections.js","index.js"],"names":["Note","_ref","note","toggleImportance","label","important","console","log","content","react_default","a","createElement","className","onClick","services_notes","axios","get","then","response","data","newObject","post","id","put","concat","Notification","message","Footer","style","color","fontStyle","fontSize","Collections","_useState","useState","_useState2","Object","slicedToArray","notes","setNotes","_useState3","_useState4","newNote","setNewNote","_useState5","_useState6","showAll","setShowAll","_useState7","_useState8","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","components_Notification","map","components_Note","key","find","n","changedNote","objectSpread","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","value","onChange","target","type","Collections_Footer","ReactDOM","createRoot","document","getElementById","render","src_Collections"],"mappings":"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","file":"static/js/main.ac475e40.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({note, toggleImportance}) => {\r\n    const label = note.important \r\n    ? 'make not important' \r\n    : 'make important';\r\n\r\n    console.log(\"note in note function is \", note, note.content)\r\n    return (\r\n        <li className='note'>\r\n            <button onClick={toggleImportance}>{label}</button><br/>\r\n            {note.content}\r\n        </li>\r\n    )   \r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\n//Because of our situation, both the frontend and the backend are at the same address, (SEE express static (build in backend and frontend))\r\n// we can declare baseUrl as a relative URL. This means we can leave out the part declaring the server.\r\nconst baseUrl = '/api/notes'\r\n\r\n\r\n//'https://tsedefsnotes.herokuapp.com' \r\n//frontend also works with the backend on Heroku!\r\n//http://localhost:3001/api/notes\r\n/*\r\n   api/notes \r\nwhenever express gets an HTTP GET request it will first check if the build directory contains a file corresponding to the request's address. If a correct file is found, express will return it.\r\nNow HTTP GET requests to the address www.serversaddress.com/index.html or www.serversaddress.com will show the React frontend. GET requests to the address www.serversaddress.com/api/notes will be handled by the backend's code.\r\n*/\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\n//Since the names of the keys and the assigned variables are the same, \r\n//we can write the object definition with a more compact syntax: \r\n/* INITIAL\r\ngetAll: getAll, \r\ncreate: create, \r\nupdate: update \r\n*/\r\nexport default { getAll, create, update }","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"add\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Notification","import React, { useState, useEffect } from \"react\"\r\nimport axios from 'axios'\r\nimport Note from './components/Note'\r\nimport noteService from './services/notes'\r\nimport Notification from \"./components/Notification\"\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: 'green',\r\n    fontStyle: 'italic',\r\n    fontSize: 16\r\n  }\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>Note app, Department of Computer Science, University of Helsinki 2022</em>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Collections = () => {\r\n\r\n  const [ notes, setNotes ] = useState([])\r\n  const [ newNote, setNewNote ] = useState('a new note...')\r\n  const [ showAll, setShowAll ] = useState(true)\r\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\r\n\r\n  //axios.get() initiates fetching of data from server and registers response's function as an event handler for the operation\r\n  useEffect(() => { \r\n    noteService.getAll()\r\n    .then(initialNotes => {\r\n      setNotes(initialNotes)\r\n    })\r\n  }, []) //useEffect takes two parameters: The first is a function, the effect itself.\r\n  /*\r\n    The second parameter of useEffect is used to specify how often the effect is run. \r\n    If the second parameter is an empty array [], \r\n    then the effect is only run along with the first render of the component.\r\n\r\n    useEffect(() => {\r\n      console.log('effect')\r\n\r\n      const eventHandler = response => {\r\n        console.log('promise fulfilled')\r\n        setNotes(response.data)\r\n      }\r\n\r\n      const promise = axios.get('http://localhost:3001/notes')\r\n      promise.then(eventHandler)\r\n    }, [])\r\n  */\r\n\r\n  // console.log('render', notes.length, 'notes')\r\n\r\n  const notesToShow = showAll ? notes : notes.filter(note => note.important === true)\r\n                    //showAll ? notes : notes.filter(note => note.important) is also correct since note.important is either true or false\r\n  \r\n  const toggleImportanceOf = id => {\r\n    const note = notes.find(n => n.id === id)\r\n    const changedNote = { ...note, important: !note.important }\r\n  \r\n    noteService\r\n    .update(changedNote)\r\n    .then(returnedNote => {\r\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n    })\r\n    .catch(error => {\r\n      setErrorMessage(\r\n        `Note '${note.content}' was already removed from server`\r\n      )\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 5000)\r\n      setNotes(notes.filter(n => n.id !== id))\r\n    })\r\n  }\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault()\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() < 0.5,\r\n    }\r\n    \r\n    noteService.create(noteObject)\r\n    .then(returnedNote => {\r\n      setNotes(notes.concat(returnedNote))\r\n      setNewNote('')\r\n    })\r\n    .catch(error => {\r\n      console.log('fail')\r\n    })\r\n   \r\n  }\r\n  \r\n  const handleNoteChange = (event) => {\r\n    console.log(event.target.value)\r\n    setNewNote(event.target.value)\r\n  }\r\n    return (    \r\n      <div>\r\n        <h1>Notes</h1> \r\n        <Notification message={errorMessage} />\r\n        <div>\r\n          <button onClick={() => setShowAll(!showAll)}>\r\n            show {(showAll ? 'important' : 'all')}\r\n          </button>\r\n        </div>\r\n        <ul>\r\n          {/* {console.log('we are in return', notes)}   */}\r\n          {notesToShow.map( note => \r\n          <Note \r\n          key={note.id} \r\n          note={note} \r\n          toggleImportance={() => toggleImportanceOf(note.id)}\r\n          /> )}\r\n        </ul> \r\n        <form onSubmit={addNote}>\r\n          <input \r\n            value={newNote}\r\n            onChange={handleNoteChange} />\r\n          <button type=\"submit\">save</button>\r\n        </form>\r\n        <Footer/>\r\n      </div>\r\n    )   \r\n}\r\n\r\nexport default Collections ","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport axios from 'axios'\nimport Collections from './Collections'\nimport './index.css'\n\n// Collections db\n// axios  //More appropriate way to use a promise and its response -- chained method calls\n//   .get('http://localhost:3001/notes')\n//   .then(response => {\n//     const notes = response.data\n//     console.log(notes)\n//   })\n\n//Phonebook db\n// axios   //More appropriate way to use a promise and its response -- chained method calls\n//   .get('http://localhost:3001/persons')\n//   .then(response => {\n//     const persons = response.data\n//     console.log(`persons from json db: ${persons}`)\n//   })\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <Collections />)\n"],"sourceRoot":""}